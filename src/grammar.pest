WHITESPACE = _{ " " | "\t" }

__used_externally = {
    commands
}

commands        = _{ SOI ~ expression* ~ expression_last? ~ EOI }
expression      = _{ statement? ~ ignored? ~ NEWLINE }
expression_last = _{ statement? ~ ignored? }

statement = _{
    conditional
  | instruction
  | assignment
  | comment
  | ignored
}

conditional        = ${ conditional_if ~ (WHITESPACE* ~ conditional_else)? }
conditional_if     = ${ ^"if" ~ WHITESPACE+ ~ condition ~ WHITESPACE* ~ block }
conditional_else   = ${ ^"else" ~ WHITESPACE+ ~ block }
condition          = !{
    (switch ~ comparison_partial ~ bool)
  | (variable ~ comparison_full ~ (variable | number))
}
comparison_partial =  { "==" | "!=" }
comparison_full    =  { "==" | "!=" | ">" | "<" | ">=" | "<=" }
block              = !{ "{" ~ (ignored ~ NEWLINE)? ~ expression* ~ expression_last? ~ "}" }

instruction =  { operation ~ arguments? }
operation   = @{ ASCII_ALPHA+ ~ &WHITESPACE }
arguments   = _{ argument ~ ("," ~ argument)* }
argument    =  { ASCII_ALPHANUMERIC+ }

assignment              =  { assignment_switch | assignment_variable }
assignment_switch       =  { (range | switch | pointer) ~ "=" ~ assignment_switch_rhs }
assignment_switch_rhs   =  { ^"true" | ^"false" | ^"on" | ^"off" | ^"toggle" }
assignment_variable     =  { (range | variable | pointer) ~ assignment_variable_op ~ assignment_variable_rhs }
assignment_variable_op  =  { "=" | "+=" | "-=" | "*=" | "/=" | "%=" }
assignment_variable_rhs = _{ (pointer | variable | number | random) ~ ignored? }

comment =  { ";" ~ rest }
ignored = _{ ("#" | "//") ~ (!NEWLINE ~ ANY)* }

// terms
switch   = @{ ^"S" ~ ASCII_DIGIT{4} }
variable = @{ ^"V" ~ ASCII_DIGIT{4} }
pointer  =  { "[" ~ variable ~ "]" }
range    = ${ (switch ~ ":" ~ switch) | (variable ~ ":" ~ variable) }
event    = @{ ^"E" ~ ^"V"? ~ ASCII_DIGIT{4} }
number   = @{ ("-" | "+")? ~ ("0x" ~ ASCII_HEX_DIGIT+ | "0b" ~ ASCII_BIN_DIGIT+ | "0o" ~ ASCII_OCT_DIGIT+ | ASCII_DIGIT+) }
bool     =  { ^"on" | ^"off" | ^"true" | ^"false" }
rest     =  { (!NEWLINE ~ ANY)* }
random   =  { "Random(" ~ number ~ "," ~ number ~ ")" }
