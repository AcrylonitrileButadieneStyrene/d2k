WHITESPACE = _{ " " | "\t" }

commands        = _{ SOI ~ expression* ~ expression_last? ~ EOI }
expression      = _{ statement? ~ ignored? ~ NEWLINE }
expression_last = _{ statement? ~ ignored? }

statement = _{
    conditional
  | loop
  | assignment
  | comment
  | ignored
  | instruction
}

conditional        = ${ conditional_if ~ (WHITESPACE* ~ conditional_else)? }
conditional_if     = ${ ^"if" ~ WHITESPACE+ ~ condition ~ WHITESPACE* ~ block }
conditional_else   = ${ ^"else" ~ WHITESPACE+ ~ block }
condition          = !{
    (switch ~ comparison_partial ~ bool)
  | (variable ~ comparison_full ~ (variable | number))
}
comparison_partial =  { "==" | "!=" }
comparison_full    =  { "==" | "!=" | ">" | "<" | ">=" | "<=" }
block              = !{ "{" ~ (ignored ~ NEWLINE)? ~ expression* ~ expression_last? ~ "}" }

loop = { "loop" ~ block }

instruction =  { operation ~ arguments? }
operation   = @{ ASCII_ALPHA+ }
arguments   =  { argument ~ ("," ~ argument)* }
argument    =  { (!WHITESPACE ~ !NEWLINE ~ !"," ~ ANY)+ }

instruction_call = _{ common_event | (event ~ "," ~ number) | (pointer ~ "," ~ pointer) }

assignment              =  { assignment_switch | assignment_variable }
assignment_switch       =  { (range | switch | pointer) ~ "=" ~ assignment_switch_rhs }
assignment_switch_rhs   =  { ^"true" | ^"false" | ^"on" | ^"off" | ^"toggle" }
assignment_variable     =  { (range | variable | pointer) ~ assignment_variable_op ~ assignment_variable_rhs }
assignment_variable_op  =  { "=" | "+=" | "-=" | "*=" | "/=" | "%=" }
assignment_variable_rhs = _{ (pointer | variable | number | random) ~ ignored? }

comment =  { ";" ~ rest }
ignored = _{ ("#" | "//") ~ (!NEWLINE ~ ANY)* }

// terms
four_digits  = @{ ASCII_DIGIT{4} }
switch       = ${ ^"S" ~ four_digits }
variable     = ${ ^"V" ~ four_digits }
pointer      =  { "[" ~ variable ~ "]" }
range        = ${ (switch ~ ":" ~ switch) | (variable ~ ":" ~ variable) }
common_event = ${ ^"CE" ~ ^"V"? ~ four_digits }
event        = ${ ^"E" ~ ^"V"? ~ four_digits }
number       = @{ ("-" | "+")? ~ ("0x" ~ ASCII_HEX_DIGIT+ | "0b" ~ ASCII_BIN_DIGIT+ | "0o" ~ ASCII_OCT_DIGIT+ | ASCII_DIGIT+) }
bool         =  { ^"on" | ^"off" | ^"true" | ^"false" }
rest         =  { (!NEWLINE ~ ANY)* }
random       =  { "Random(" ~ number ~ "," ~ number ~ ")" }
